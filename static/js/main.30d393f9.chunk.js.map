{"version":3,"sources":["App.tsx","index.tsx"],"names":["Buttons","goodsFromServer","App","useState","SORT__BY__DEFAULT","sortType","setsortType","isReversed","setIsReversed","preparedGoods","goods","copyGoods","sort","good1","good2","SORT__ALPHBETICALLY","localeCompare","SORT__BY__LENGTH","length","reverse","getPreparedGoods","resetCondition","className","type","cn","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAKKA,E,oFAAAA,K,2CAAAA,E,oCAAAA,E,sBAAAA,M,KAME,IAAMC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA0BK,IAAMC,EAAgB,WAC3B,MAAgCC,mBAAkBH,EAAQI,mBAA1D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA1BR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAS,YAAOD,GAetB,OAbIL,GACFM,EAAUC,MAAK,SAACC,EAAOC,GACrB,OAAQT,GACN,KAAKL,EAAQe,oBACX,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAAQiB,iBACX,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QAAS,OAAO,MAKfX,EAAaI,EAAUQ,UAAYR,EAMpBS,CACpBnB,EAAiBI,EAAUE,GAQvBc,EACJhB,IAAaL,EAAQI,mBAAqBG,EAG5C,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYnB,IAAaL,EAAQe,sBAErCU,QAAS,kBAAMnB,EAAYN,EAAQe,sBANrC,iCAWA,wBACEQ,KAAK,SACLD,UACEE,IACE,oBACA,CAAE,WAAYnB,IAAaL,EAAQiB,mBAGvCQ,QAAS,kBAAMnB,EAAYN,EAAQiB,mBARrC,4BAcA,wBACEM,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAajB,IAEjBkB,QAAS,kBAAMjB,GAAc,SAACkB,GAAD,OAAcA,MAN7C,qBAWCL,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QApDU,WAClBnB,EAAYN,EAAQI,mBACpBI,GAAc,IA+CR,sBAUJ,6BACGC,EAAckB,KAAI,SAAAC,GAAI,OACrB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCjHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.30d393f9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nenum Buttons {\n  SORT__ALPHBETICALLY = 'sort__alphabetically',\n  SORT__BY__LENGTH = 'sort__by__length',\n  SORT__BY__DEFAULT = '',\n}\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortType: Buttons,\n  isReversed: boolean,\n) {\n  const copyGoods = [...goods];\n\n  if (sortType) {\n    copyGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case Buttons.SORT__ALPHBETICALLY:\n          return good1.localeCompare(good2);\n        case Buttons.SORT__BY__LENGTH:\n          return good1.length - good2.length;\n\n        default: return 0;\n      }\n    });\n  }\n\n  return isReversed ? copyGoods.reverse() : copyGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setsortType] = useState<Buttons>(Buttons.SORT__BY__DEFAULT);\n  const [isReversed, setIsReversed] = useState(false);\n  const preparedGoods = getPreparedGoods(\n    goodsFromServer, sortType, isReversed,\n  );\n\n  const handleReset = () => {\n    setsortType(Buttons.SORT__BY__DEFAULT);\n    setIsReversed(false);\n  };\n\n  const resetCondition = (\n    sortType !== Buttons.SORT__BY__DEFAULT || isReversed\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortType !== Buttons.SORT__ALPHBETICALLY },\n          )}\n          onClick={() => setsortType(Buttons.SORT__ALPHBETICALLY)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button is-success',\n              { 'is-light': sortType !== Buttons.SORT__BY__LENGTH },\n            )\n          }\n          onClick={() => setsortType(Buttons.SORT__BY__LENGTH)}\n\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed((current) => !current)}\n        >\n          Reverse\n        </button>\n\n        {resetCondition && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {preparedGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}